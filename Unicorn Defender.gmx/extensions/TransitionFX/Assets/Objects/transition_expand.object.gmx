<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>Pnt_transition</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

weightx = 0.5;
weighty = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode_ext(bm_one, bm_zero);
if(captured &amp;&amp; captured2){
    s1 = surface;
    s2 = surface2;
    prog = progress;
    if(reverse){
        s1 = surface2;
        s2 = surface;
        prog = 1 - progress;
    }
    if(blackout){
        if(reverse){
            draw_set_colour(c_black);
            w = (view_wview/2);
            h = (view_hview/2);
            xx = view_wview/2 - w;
            yy = view_hview/2 - h;
            draw_rectangle(xx, yy, xx + w*2, yy + h*2, false);
            draw_set_colour(c_white);
            
            inv = 1 - prog;
            wx = 0.5*prog + weightx*inv;
            wy = 0.5*prog + weighty*inv;
            xx = view_wview*weightx - (view_wview*weightx)*prog;
            yy = view_hview*weighty - (view_hview*weighty)*prog;
            if(!f_fadeOut){
                draw_surface_ext(s2, xx, yy, prog, prog, 0, c_white, 1);
            } else{
                draw_surface_ext(s2, xx, yy, prog, prog, 0, merge_colour(c_white, c_black, progress), 1);
            }
        } else{
            if(!f_fadeOut){
                draw_surface(s1, 0, 0);
            } else{
                draw_surface_ext(s1, 0, 0, 1, 1, 0, merge_colour(c_white, c_black, prog), 1);
            }
            draw_set_colour(c_black);
            w = (view_wview/2) * prog;
            h = (view_hview/2) * prog;
            inv = 1 - prog;
            wx = 0.5*prog + weightx*inv;
            wy = 0.5*prog + weighty*inv;
            xx = view_wview*weightx - (view_wview*weightx)*prog;
            yy = view_hview*weighty - (view_hview*weighty)*prog;
            draw_rectangle(xx, yy, xx + w*2, yy + h*2, false);
            draw_set_colour(c_white);
        }
    }
    if(!blackout){
        if(f_blackout &amp;&amp; !reverse){
            draw_clear(c_black);
        } else{
            if(!f_fadeOut || reverse){
                draw_surface(s1, 0, 0);
            } else{
                draw_surface_ext(s1, 0, 0, 1, 1, 0, merge_colour(c_white, c_black, prog), 1);
            }
        }
        inv = 1 - prog;
        wx = 0.5*prog + weightx*inv;
        wy = 0.5*prog + weighty*inv;
        xx = view_wview*weightx - (view_wview*weightx)*prog;
        yy = view_hview*weighty - (view_hview*weighty)*prog;
        if(!reverse){
            draw_surface_ext(s2, xx, yy, prog, prog, 0, c_white, 1);
        } else{
            if(!f_fadeOut){
                draw_surface_ext(s2, xx, yy, prog, prog, 0, c_white, 1);
            } else{
                draw_surface_ext(s2, xx, yy, prog, prog, 0, merge_colour(c_white, c_black, progress), 1);
            }
        }
        
        if(f_blackout &amp;&amp; reverse){
            draw_set_colour(c_black);
            w = (view_wview/2) * prog;
            h = (view_hview/2) * prog;
            inv = 1 - prog;
            wx = 0.5*prog + weightx*inv;
            wy = 0.5*prog + weighty*inv;
            xx = view_wview*weightx - (view_wview*weightx)*prog;
            yy = view_hview*weighty - (view_hview*weighty)*prog;
            draw_rectangle(xx, yy, xx + w*2, yy + h*2, false);
        }
    }
}
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
