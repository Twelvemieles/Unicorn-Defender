<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>Pnt_transition</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!captured2){
    event_inherited();
    if(captured2){
        surface_copy(surface2, 0, 0, surface);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(captured &amp;&amp; captured2){
    surface_set_target(surface2);
    
    mx = view_wview/2;
    my = view_hview/2;
    
    i = min(progress, 0.5);
    angle = -90 * (i);
    
    draw_set_alpha(0.05);
    
    dist = point_distance(0, 0, mx, my);
    dist = dist + dist*i*2;
    d1 = point_direction(mx, my, 0, 0);
    d2 = point_direction(mx, my, view_wview, 0);
    d3 = point_direction(mx, my, view_wview, view_hview);
    d4 = point_direction(mx, my, 0, view_hview);
    
    x1 = mx + lengthdir_x(dist, d1 + angle);
    y1 = my + lengthdir_y(dist, d1 + angle);
    x2 = mx + lengthdir_x(dist, d2 + angle);
    y2 = my + lengthdir_y(dist, d2 + angle);
    x3 = mx + lengthdir_x(dist, d3 + angle);
    y3 = my + lengthdir_y(dist, d3 + angle);
    x4 = mx + lengthdir_x(dist, d4 + angle);
    y4 = my + lengthdir_y(dist, d4 + angle);
    
    tex = surface_get_texture(surface);
    draw_primitive_begin_texture(pr_trianglestrip, tex);
    draw_vertex_texture(x2, y2, 1, 0);
    draw_vertex_texture(x1, y1, 0, 0);
    draw_vertex_texture(x3, y3, 1, 1);
    draw_vertex_texture(x4, y4, 0, 1);
    draw_primitive_end();
    
    surface_reset_target();
    //surface_copy(surface, 0, 0, surface2);
    
    draw_set_alpha(1);
    draw_set_blend_mode_ext(bm_one, bm_zero);
    draw_surface(surface2, 0, 0);
    draw_set_blend_mode(bm_normal);
    
    if(progress &gt; 0.5){
        draw_set_alpha((progress-0.5)*2);
        draw_set_colour(c_black);
        draw_rectangle(0, 0, view_wview, view_hview, false);
        draw_set_alpha(1);
        draw_set_colour(c_white);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
