<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>Pnt_transition</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

overlap = false;

slides = 8;
ww = view_wview / slides;
hh = view_hview / slides;

dir = TranOrientation.Horizontal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(captured &amp;&amp; captured2){
    draw_set_blend_mode_ext(bm_one, bm_zero);
    if(!f_fadeOut){
        draw_surface(surface, 0, 0);
    } else{
        draw_surface_ext(surface, 0, 0, 1, 1, 0, merge_colour(c_white, c_black, progress), 1);
    }
    for(i = 0; i &lt; slides; i++){
    
        if(dir == TranOrientation.Vertical){
            y1 = -view_hview * progress;
            y2 = view_hview - view_hview*progress;
            if(i % 2 == 0){
                if(!overlap){
                    draw_surface_part(surface, i*ww, 0, ww, view_hview, i*ww, -y1);
                }
                draw_surface_part(surface2, i*ww, 0, ww, view_hview, i*ww, -y2);
            } else{
                if(!overlap){
                    draw_surface_part(surface, i*ww, 0, ww, view_hview, i*ww, y1);
                }
                draw_surface_part(surface2, i*ww, 0, ww, view_hview, i*ww, y2);
            }
        } else{
            x1 = -view_wview * progress;
            x2 = view_wview - view_wview*progress;
            if(i % 2 == 0){
                if(!overlap){
                    draw_surface_part(surface, 0, i*hh, view_wview, hh, -x1, i*hh);
                }
                draw_surface_part(surface2, 0, i*hh, view_wview, hh, -x2, i*hh);
            } else{
                if(!overlap){
                    draw_surface_part(surface, 0, i*hh, view_wview, hh, x1, i*hh);
                }
                draw_surface_part(surface2, 0, i*hh, view_wview, hh, x2, i*hh);
            }
        }
    }
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
